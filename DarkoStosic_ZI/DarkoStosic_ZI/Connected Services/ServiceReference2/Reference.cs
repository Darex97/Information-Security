//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DarkoStosic_ZI.ServiceReference2 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference2.IRSA")]
    public interface IRSA {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRSA/Crypt", ReplyAction="http://tempuri.org/IRSA/CryptResponse")]
        int Crypt(int M, int e, int N);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRSA/Crypt", ReplyAction="http://tempuri.org/IRSA/CryptResponse")]
        System.Threading.Tasks.Task<int> CryptAsync(int M, int e, int N);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRSA/Calculate", ReplyAction="http://tempuri.org/IRSA/CalculateResponse")]
        int Calculate(int startValue, int eksp, int N);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRSA/Calculate", ReplyAction="http://tempuri.org/IRSA/CalculateResponse")]
        System.Threading.Tasks.Task<int> CalculateAsync(int startValue, int eksp, int N);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRSA/Decrypt", ReplyAction="http://tempuri.org/IRSA/DecryptResponse")]
        int Decrypt(int C, int d, int N);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRSA/Decrypt", ReplyAction="http://tempuri.org/IRSA/DecryptResponse")]
        System.Threading.Tasks.Task<int> DecryptAsync(int C, int d, int N);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRSA/GetMinimalDivider", ReplyAction="http://tempuri.org/IRSA/GetMinimalDividerResponse")]
        int GetMinimalDivider(int a, int b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRSA/GetMinimalDivider", ReplyAction="http://tempuri.org/IRSA/GetMinimalDividerResponse")]
        System.Threading.Tasks.Task<int> GetMinimalDividerAsync(int a, int b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRSA/CryptBMP", ReplyAction="http://tempuri.org/IRSA/CryptBMPResponse")]
        void CryptBMP(string odredisni, string path, int e, int N);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRSA/CryptBMP", ReplyAction="http://tempuri.org/IRSA/CryptBMPResponse")]
        System.Threading.Tasks.Task CryptBMPAsync(string odredisni, string path, int e, int N);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRSA/DecryptBMP", ReplyAction="http://tempuri.org/IRSA/DecryptBMPResponse")]
        void DecryptBMP(string odredisni, string path, int e, int N);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRSA/DecryptBMP", ReplyAction="http://tempuri.org/IRSA/DecryptBMPResponse")]
        System.Threading.Tasks.Task DecryptBMPAsync(string odredisni, string path, int e, int N);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRSAChannel : DarkoStosic_ZI.ServiceReference2.IRSA, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RSAClient : System.ServiceModel.ClientBase<DarkoStosic_ZI.ServiceReference2.IRSA>, DarkoStosic_ZI.ServiceReference2.IRSA {
        
        public RSAClient() {
        }
        
        public RSAClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RSAClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RSAClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RSAClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int Crypt(int M, int e, int N) {
            return base.Channel.Crypt(M, e, N);
        }
        
        public System.Threading.Tasks.Task<int> CryptAsync(int M, int e, int N) {
            return base.Channel.CryptAsync(M, e, N);
        }
        
        public int Calculate(int startValue, int eksp, int N) {
            return base.Channel.Calculate(startValue, eksp, N);
        }
        
        public System.Threading.Tasks.Task<int> CalculateAsync(int startValue, int eksp, int N) {
            return base.Channel.CalculateAsync(startValue, eksp, N);
        }
        
        public int Decrypt(int C, int d, int N) {
            return base.Channel.Decrypt(C, d, N);
        }
        
        public System.Threading.Tasks.Task<int> DecryptAsync(int C, int d, int N) {
            return base.Channel.DecryptAsync(C, d, N);
        }
        
        public int GetMinimalDivider(int a, int b) {
            return base.Channel.GetMinimalDivider(a, b);
        }
        
        public System.Threading.Tasks.Task<int> GetMinimalDividerAsync(int a, int b) {
            return base.Channel.GetMinimalDividerAsync(a, b);
        }
        
        public void CryptBMP(string odredisni, string path, int e, int N) {
            base.Channel.CryptBMP(odredisni, path, e, N);
        }
        
        public System.Threading.Tasks.Task CryptBMPAsync(string odredisni, string path, int e, int N) {
            return base.Channel.CryptBMPAsync(odredisni, path, e, N);
        }
        
        public void DecryptBMP(string odredisni, string path, int e, int N) {
            base.Channel.DecryptBMP(odredisni, path, e, N);
        }
        
        public System.Threading.Tasks.Task DecryptBMPAsync(string odredisni, string path, int e, int N) {
            return base.Channel.DecryptBMPAsync(odredisni, path, e, N);
        }
    }
}
