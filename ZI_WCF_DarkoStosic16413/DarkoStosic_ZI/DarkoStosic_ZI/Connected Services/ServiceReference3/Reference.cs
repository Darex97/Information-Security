//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DarkoStosic_ZI.ServiceReference3 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference3.IA51")]
    public interface IA51 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IA51/LoadKey", ReplyAction="http://tempuri.org/IA51/LoadKeyResponse")]
        bool LoadKey(ulong key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IA51/LoadKey", ReplyAction="http://tempuri.org/IA51/LoadKeyResponse")]
        System.Threading.Tasks.Task<bool> LoadKeyAsync(ulong key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IA51/LoadKeyParts", ReplyAction="http://tempuri.org/IA51/LoadKeyPartsResponse")]
        bool LoadKeyParts(ulong xSeed, ulong ySeed, ulong zSeed);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IA51/LoadKeyParts", ReplyAction="http://tempuri.org/IA51/LoadKeyPartsResponse")]
        System.Threading.Tasks.Task<bool> LoadKeyPartsAsync(ulong xSeed, ulong ySeed, ulong zSeed);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IA51/LoadStepBits", ReplyAction="http://tempuri.org/IA51/LoadStepBitsResponse")]
        bool LoadStepBits(byte[] xsb, byte[] ysb, byte[] zsb);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IA51/LoadStepBits", ReplyAction="http://tempuri.org/IA51/LoadStepBitsResponse")]
        System.Threading.Tasks.Task<bool> LoadStepBitsAsync(byte[] xsb, byte[] ysb, byte[] zsb);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IA51/LoadVoteBits", ReplyAction="http://tempuri.org/IA51/LoadVoteBitsResponse")]
        bool LoadVoteBits(byte xvb, byte yvb, byte zvb);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IA51/LoadVoteBits", ReplyAction="http://tempuri.org/IA51/LoadVoteBitsResponse")]
        System.Threading.Tasks.Task<bool> LoadVoteBitsAsync(byte xvb, byte yvb, byte zvb);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IA51/EncodeByte", ReplyAction="http://tempuri.org/IA51/EncodeByteResponse")]
        byte EncodeByte(byte number);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IA51/EncodeByte", ReplyAction="http://tempuri.org/IA51/EncodeByteResponse")]
        System.Threading.Tasks.Task<byte> EncodeByteAsync(byte number);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IA51/Encode2Bytes", ReplyAction="http://tempuri.org/IA51/Encode2BytesResponse")]
        ushort Encode2Bytes(ushort number);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IA51/Encode2Bytes", ReplyAction="http://tempuri.org/IA51/Encode2BytesResponse")]
        System.Threading.Tasks.Task<ushort> Encode2BytesAsync(ushort number);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IA51/ByteArrayOfBitsToByte", ReplyAction="http://tempuri.org/IA51/ByteArrayOfBitsToByteResponse")]
        byte ByteArrayOfBitsToByte(byte[] ba);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IA51/ByteArrayOfBitsToByte", ReplyAction="http://tempuri.org/IA51/ByteArrayOfBitsToByteResponse")]
        System.Threading.Tasks.Task<byte> ByteArrayOfBitsToByteAsync(byte[] ba);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IA51/ShiftRightAndInsert", ReplyAction="http://tempuri.org/IA51/ShiftRightAndInsertResponse")]
        byte[] ShiftRightAndInsert(byte[] array, byte insertValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IA51/ShiftRightAndInsert", ReplyAction="http://tempuri.org/IA51/ShiftRightAndInsertResponse")]
        System.Threading.Tasks.Task<byte[]> ShiftRightAndInsertAsync(byte[] array, byte insertValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IA51/FromUIntToByteArrayOfBits", ReplyAction="http://tempuri.org/IA51/FromUIntToByteArrayOfBitsResponse")]
        byte[] FromUIntToByteArrayOfBits(byte[] array, uint seed);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IA51/FromUIntToByteArrayOfBits", ReplyAction="http://tempuri.org/IA51/FromUIntToByteArrayOfBitsResponse")]
        System.Threading.Tasks.Task<byte[]> FromUIntToByteArrayOfBitsAsync(byte[] array, uint seed);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IA51/ResetRegisters", ReplyAction="http://tempuri.org/IA51/ResetRegistersResponse")]
        void ResetRegisters();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IA51/ResetRegisters", ReplyAction="http://tempuri.org/IA51/ResetRegistersResponse")]
        System.Threading.Tasks.Task ResetRegistersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IA51/IsInitialized", ReplyAction="http://tempuri.org/IA51/IsInitializedResponse")]
        bool IsInitialized();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IA51/IsInitialized", ReplyAction="http://tempuri.org/IA51/IsInitializedResponse")]
        System.Threading.Tasks.Task<bool> IsInitializedAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IA51Channel : DarkoStosic_ZI.ServiceReference3.IA51, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class A51Client : System.ServiceModel.ClientBase<DarkoStosic_ZI.ServiceReference3.IA51>, DarkoStosic_ZI.ServiceReference3.IA51 {
        
        public A51Client() {
        }
        
        public A51Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public A51Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public A51Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public A51Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool LoadKey(ulong key) {
            return base.Channel.LoadKey(key);
        }
        
        public System.Threading.Tasks.Task<bool> LoadKeyAsync(ulong key) {
            return base.Channel.LoadKeyAsync(key);
        }
        
        public bool LoadKeyParts(ulong xSeed, ulong ySeed, ulong zSeed) {
            return base.Channel.LoadKeyParts(xSeed, ySeed, zSeed);
        }
        
        public System.Threading.Tasks.Task<bool> LoadKeyPartsAsync(ulong xSeed, ulong ySeed, ulong zSeed) {
            return base.Channel.LoadKeyPartsAsync(xSeed, ySeed, zSeed);
        }
        
        public bool LoadStepBits(byte[] xsb, byte[] ysb, byte[] zsb) {
            return base.Channel.LoadStepBits(xsb, ysb, zsb);
        }
        
        public System.Threading.Tasks.Task<bool> LoadStepBitsAsync(byte[] xsb, byte[] ysb, byte[] zsb) {
            return base.Channel.LoadStepBitsAsync(xsb, ysb, zsb);
        }
        
        public bool LoadVoteBits(byte xvb, byte yvb, byte zvb) {
            return base.Channel.LoadVoteBits(xvb, yvb, zvb);
        }
        
        public System.Threading.Tasks.Task<bool> LoadVoteBitsAsync(byte xvb, byte yvb, byte zvb) {
            return base.Channel.LoadVoteBitsAsync(xvb, yvb, zvb);
        }
        
        public byte EncodeByte(byte number) {
            return base.Channel.EncodeByte(number);
        }
        
        public System.Threading.Tasks.Task<byte> EncodeByteAsync(byte number) {
            return base.Channel.EncodeByteAsync(number);
        }
        
        public ushort Encode2Bytes(ushort number) {
            return base.Channel.Encode2Bytes(number);
        }
        
        public System.Threading.Tasks.Task<ushort> Encode2BytesAsync(ushort number) {
            return base.Channel.Encode2BytesAsync(number);
        }
        
        public byte ByteArrayOfBitsToByte(byte[] ba) {
            return base.Channel.ByteArrayOfBitsToByte(ba);
        }
        
        public System.Threading.Tasks.Task<byte> ByteArrayOfBitsToByteAsync(byte[] ba) {
            return base.Channel.ByteArrayOfBitsToByteAsync(ba);
        }
        
        public byte[] ShiftRightAndInsert(byte[] array, byte insertValue) {
            return base.Channel.ShiftRightAndInsert(array, insertValue);
        }
        
        public System.Threading.Tasks.Task<byte[]> ShiftRightAndInsertAsync(byte[] array, byte insertValue) {
            return base.Channel.ShiftRightAndInsertAsync(array, insertValue);
        }
        
        public byte[] FromUIntToByteArrayOfBits(byte[] array, uint seed) {
            return base.Channel.FromUIntToByteArrayOfBits(array, seed);
        }
        
        public System.Threading.Tasks.Task<byte[]> FromUIntToByteArrayOfBitsAsync(byte[] array, uint seed) {
            return base.Channel.FromUIntToByteArrayOfBitsAsync(array, seed);
        }
        
        public void ResetRegisters() {
            base.Channel.ResetRegisters();
        }
        
        public System.Threading.Tasks.Task ResetRegistersAsync() {
            return base.Channel.ResetRegistersAsync();
        }
        
        public bool IsInitialized() {
            return base.Channel.IsInitialized();
        }
        
        public System.Threading.Tasks.Task<bool> IsInitializedAsync() {
            return base.Channel.IsInitializedAsync();
        }
    }
}
